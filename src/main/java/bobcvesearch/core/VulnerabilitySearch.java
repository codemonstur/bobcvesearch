package bobcvesearch.core;

import bobcvesearch.model.CliCveSearch;
import bobcvesearch.model.Finding;
import bobcvesearch.model.SuppressRule;
import bobcvesearch.model.SuppressionsFile;
import bobthebuildtool.pojos.buildfile.Dependency;
import bobthebuildtool.pojos.buildfile.Project;
import bobthebuildtool.pojos.error.DependencyResolutionFailed;
import bobthebuildtool.services.Constants;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static bobcvesearch.core.DependencyResolution.listProjectDependencies;
import static bobcvesearch.core.NistVulnerabilityDatabase.findMatchingDocuments;
import static bobcvesearch.core.NistVulnerabilityDatabase.updateNistVulnerabilityDatabase;
import static bobthebuildtool.services.Functions.isNullOrEmpty;
import static java.nio.file.Files.isRegularFile;
import static java.nio.file.Files.readString;
import static java.util.stream.Collectors.toList;

public enum VulnerabilitySearch {;

    public static List<Finding> findVulnerabilities(final Project project, final CliCveSearch cli)
            throws IOException, DependencyResolutionFailed {
        updateNistVulnerabilityDatabase(cli.numDays);

        final var file = loadSuppresionsFile(project, cli.suppressions);
        return removeSuppressed(findVulnerabilities(listProjectDependencies(project)), file.rules);
    }

    private static SuppressionsFile loadSuppresionsFile(final Project project, final Path path) throws IOException {
        final var suppresionsFile = project.parentDir.resolve(path);
        if (!isRegularFile(suppresionsFile)) return new SuppressionsFile();
        return Constants.YAML_PARSER.loadAs(readString(suppresionsFile), SuppressionsFile.class);
    }

    private static List<Finding> findVulnerabilities(final List<Dependency> dependencies) throws IOException {
        final var findings = new ArrayList<Finding>();
        for (final var dependency : dependencies) {
            findings.addAll(findMatchingDocuments(dependency));
        }
        return findings;
    }

    private static List<Finding> removeSuppressed(final List<Finding> findings, final Set<SuppressRule> suppressions) {
        return findings.stream()
            .filter(finding -> !suppressions.contains(new SuppressRule(finding.cve(), toGAV(finding.dependency()))))
            .collect(toList());
    }

    private static String toGAV(final Dependency dependency) {
        if (!isNullOrEmpty(dependency.repository)) return dependency.repository;
        if (!isNullOrEmpty(dependency.github)) return dependency.github;
        return dependency.toPrintableString();
    }

}
